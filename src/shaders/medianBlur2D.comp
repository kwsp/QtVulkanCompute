#version 450

layout(local_size_x = 16, local_size_y = 16) in;

// Input buffer and output buffer
layout(binding = 0) readonly buffer InputImage1 {
    float image1[];
};
layout(binding = 1) writeonly buffer OutputBuffer {
    float result[];
};

layout(push_constant) uniform PushConstants {
    int width;   // Width of the matrix
    int height;  // Height of the matrix
} pushConstants;

shared float localData[18][18];  // Shared memory for 18x18 block (16 + 2 border on each side)

void main() {
    ivec2 coords = ivec2(gl_GlobalInvocationID.xy);

    int localX = int(gl_LocalInvocationID.x) + 1;
    int localY = int(gl_LocalInvocationID.y) + 1;
    
    int globalIndex = coords.y * pushConstants.width + coords.x;

    // Load the central part of the block
    localData[localY][localX] = image1[globalIndex];

    // Load the borders (optimized to minimize branching)
    if (gl_LocalInvocationID.x == 0) {
        localData[localY][localX - 1] = image1[globalIndex - 1];
    }
    if (gl_LocalInvocationID.x == 15) {
        localData[localY][localX + 1] = image1[globalIndex + 1];
    }
    if (gl_LocalInvocationID.y == 0) {
        localData[localY - 1][localX] = image1[globalIndex - pushConstants.width];
    }
    if (gl_LocalInvocationID.y == 15) {
        localData[localY + 1][localX] = image1[globalIndex + pushConstants.width];
    }

    // Load corners only if needed (further optimization)
    if (gl_LocalInvocationID.x == 0 && gl_LocalInvocationID.y == 0) {
        localData[localY - 1][localX - 1] = image1[globalIndex - pushConstants.width - 1];
    }
    if (gl_LocalInvocationID.x == 15 && gl_LocalInvocationID.y == 0) {
        localData[localY - 1][localX + 1] = image1[globalIndex - pushConstants.width + 1];
    }
    if (gl_LocalInvocationID.x == 0 && gl_LocalInvocationID.y == 15) {
        localData[localY + 1][localX - 1] = image1[globalIndex + pushConstants.width - 1];
    }
    if (gl_LocalInvocationID.x == 15 && gl_LocalInvocationID.y == 15) {
        localData[localY + 1][localX + 1] = image1[globalIndex + pushConstants.width + 1];
    }

    // Synchronize to ensure all threads have loaded their data into shared memory
    barrier();

    // Array to hold the 3x3 neighborhood values
    float neighborhood[9];

    // Gather the 3x3 neighborhood from shared memory
    neighborhood[0] = localData[localY - 1][localX - 1];
    neighborhood[1] = localData[localY - 1][localX];
    neighborhood[2] = localData[localY - 1][localX + 1];
    neighborhood[3] = localData[localY][localX - 1];
    neighborhood[4] = localData[localY][localX];
    neighborhood[5] = localData[localY][localX + 1];
    neighborhood[6] = localData[localY + 1][localX - 1];
    neighborhood[7] = localData[localY + 1][localX];
    neighborhood[8] = localData[localY + 1][localX + 1];

    // Sort the 9 values to find the median (optimized selection sort)
    for (int i = 0; i < 9; ++i) {
        for (int j = i + 1; j < 9; ++j) {
            if (neighborhood[i] > neighborhood[j]) {
                float temp = neighborhood[i];
                neighborhood[i] = neighborhood[j];
                neighborhood[j] = temp;
            }
        }
    }

    // The median is the middle value after sorting
    float median = neighborhood[4];

    // Write the median to the output buffer
    result[globalIndex] = median;
}
